/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.agesic.firma.validaciones.util;

import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.PdfPKCS7;
import com.itextpdf.text.pdf.PdfReader;
import es.mityc.firmaJava.libreria.xades.ExtraValidators;
import org.agesic.firma.datatypes.ResultadoValidacion;
import es.mityc.firmaJava.libreria.xades.ValidarFirmaXML;
import es.mityc.firmaJava.libreria.xades.errores.FirmaXMLError;
import es.mityc.javasign.xml.xades.policy.IValidacionPolicy;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import org.agesic.firma.config.ConfigurationUtil;
import org.agesic.firma.utils.Constantes;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;

/**
 *
 * @author usuario
 */
public class FirmaValidate {

    private static ConfigurationUtil cfgUtil = new ConfigurationUtil();
    
    private static String INVALID_CERTIFICATE_ERROR_CODE = "INVALID_CERTIFICATE";
    private static String INVALID_DIGEST = "INVALID_DIGEST";
    private static String INVALID_SIGN_ERROR_CODE = "INVALID_SIGN";
    private static String INVALID_GENERAL = "INVALID_GENERAL";

    public static List<ResultadoValidacion> validarFirma(List<DataHandler> docs, String tipoFirma, byte[] cert) {

        List<ResultadoValidacion> toReturn = new ArrayList();
        try {
            if (Constantes.TIPO_FIRMA_PDF.equals(tipoFirma)) {
                for (DataHandler d : docs) {
                    List resultadoValidacionPDF = validarFirmaPDF(IOUtils.toByteArray(d.getInputStream()));
                    if (!resultadoValidacionPDF.isEmpty()) {
                        return resultadoValidacionPDF;
                    }

                }
            }
            if (Constantes.TIPO_FIRMA_XML.equals(tipoFirma)) {
                for (DataHandler d : docs) {
                    List resultadoValidacionXML = validarFirmaXML(IOUtils.toByteArray(d.getInputStream()));
                    if (!resultadoValidacionXML.isEmpty()) {
                        return resultadoValidacionXML;
                    }
                }
            }
            if (Constantes.TIPO_FIRMA_HASH.equals(tipoFirma)) {
                for (DataHandler d : docs) {
                    List resultadoValidacionHASH = validarFirmaHASH(IOUtils.toByteArray(d.getInputStream()), cert);
                    if (!resultadoValidacionHASH.isEmpty()) {
                        return resultadoValidacionHASH;
                    }
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(FirmaValidate.class.getName()).log(Level.SEVERE, null, ex);
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;
        } catch (Exception ex) {
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;
        }
        return toReturn;
    }

    public static List<ResultadoValidacion> validarFirmaPDF(byte[] data) {
        List<ResultadoValidacion> toReturn = new ArrayList();

        try {
            PdfReader reader = new PdfReader(data);
            AcroFields af = reader.getAcroFields();

            List<String> names = af.getSignatureNames();
            if (names == null || names.isEmpty()) {
                ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_SIGN_ERROR_CODE, "No se encuentra una firma en el documento.", null);
                toReturn.add(resultadoValidacion);
                return toReturn;
            }

            for (int k = 0; k < names.size(); ++k) {
                String name = names.get(k);
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                
                System.out.println("SIGN DATE " + cal);
                
                Certificate pkc[] = pk.getCertificates();
                if (!pk.verify()) {
                    ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_DIGEST, "El documento ha sido modificado luego de firmado.", null);
                    toReturn.add(resultadoValidacion);
                    return toReturn;
                }
                for (Certificate c : pkc) {
                    String error = PdfPKCS7.verifyCertificate((X509Certificate) c, null, cal);
                    if (error == null) {
                        //System.out.println("Certificates verified");
                    } else {
                        ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_CERTIFICATE_ERROR_CODE, error, null);
                        toReturn.add(resultadoValidacion);
                        return toReturn;
                    }
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(FirmaValidate.class.getName()).log(Level.SEVERE, null, ex);
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;


        } catch (SignatureException ex) {
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;
        }


        return toReturn;
        //return true;

    }

    public static List<ResultadoValidacion> validarFirmaHASH(byte[] data, byte[] cert) {
        List<ResultadoValidacion> toReturn = new ArrayList();
        try {
            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            X509Certificate x509Certificate = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(cert));
            //Verifica que la firma de los bytes sea valida.
            String signAlg = cfgUtil.getValue("SIGN_ALG");
            Signature sigver = Signature.getInstance(signAlg);
            sigver.initVerify(x509Certificate.getPublicKey());
            sigver.update(data);
            boolean verify = sigver.verify(data);
            if (!verify) {
                ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_SIGN_ERROR_CODE, "Firma no valida", null);
                toReturn.add(resultadoValidacion);
            }

            return toReturn;

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(FirmaValidate.class.getName()).log(Level.SEVERE, null, ex);
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;

        } catch (SignatureException ex) {
            Logger.getLogger(FirmaValidate.class.getName()).log(Level.SEVERE, null, ex);
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_SIGN_ERROR_CODE, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;
        } catch (CertificateException ex) {
            Logger.getLogger(FirmaValidate.class.getName()).log(Level.SEVERE, null, ex);
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_CERTIFICATE_ERROR_CODE, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;
        } catch (InvalidKeyException ex) {
            Logger.getLogger(FirmaValidate.class.getName()).log(Level.SEVERE, null, ex);
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, ex.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;
        }


    }

    public static List<ResultadoValidacion> validarFirmaXML(byte[] data) {


        ArrayList<IValidacionPolicy> arrayPolicies = new ArrayList<IValidacionPolicy>(1);
        IValidacionPolicy policy = new CertPolicy();
        arrayPolicies.add(policy);
        // Validadores extra
        ExtraValidators validator = new ExtraValidators(arrayPolicies, null, null);
        List<es.mityc.firmaJava.libreria.xades.ResultadoValidacion> results = null;
        List<ResultadoValidacion> toReturn = new ArrayList();

        try {
            ValidarFirmaXML vXml = new ValidarFirmaXML();
            results = vXml.validar(data, validator);
        } catch (FirmaXMLError e) {
            e.printStackTrace();
            ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, e.getLocalizedMessage(), null);
            toReturn.add(resultadoValidacion);
            return toReturn;
        }

        // Se muestra por consola el resultado de la validaci√≥n
        es.mityc.firmaJava.libreria.xades.ResultadoValidacion result = null;
        Iterator<es.mityc.firmaJava.libreria.xades.ResultadoValidacion> it = results.iterator();
        while (it.hasNext()) {
            result = it.next();
            boolean isValid = result.isValidate();
            if (isValid) {
                // El m√©todo getNivelValido devuelve el √∫ltimo nivel XAdES v√°lido
                //System.out.println("La firma es valida.\n" + result.getNivelValido());
//                         + "\nCertificado: " + ((X509Certificate) result.getDatosFirma().getCadenaFirma().getCertificates().get(0)).getSubjectDN()
//                         + "\nFirmado el: " + result.getDatosFirma().getFechaFirma()
//                         + "\nEstado de confianza: " + result.getDatosFirma().esCadenaConfianza()
//                         + "\nNodos firmados: " + result.getFirmados());
            } else {
                // El m√©todo getLog devuelve el mensaje de error que invalid√≥ la firma
                //System.out.println("La firma NO es valida\n" + result.getLog());
                ResultadoValidacion resultadoValidacion = new ResultadoValidacion(INVALID_GENERAL, result.getLog(), null);
                toReturn.add(resultadoValidacion);
            }
        }

        return toReturn;
    }

    public static void main(String[] args) {

        String file = "C:\\Users\\satella\\Documents\\hello_signed - copia.pdf";
        File fileF = new File(file);
        try {
            List map = FirmaValidate.validarFirmaPDF(FileUtils.readFileToByteArray(fileF));
            System.out.println("MAP " + map);
        } catch (IOException ex) {
            Logger.getLogger(FirmaValidate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
